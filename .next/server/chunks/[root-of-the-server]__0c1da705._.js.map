{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///D:/nextjslearning/hunting-coder/src/app/api/generateBlogs/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\n// ✅ CORRECTED: Use the official library package name\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\nimport fs from \"fs/promises\";\r\nimport path from \"path\";\r\n\r\n// ✅ CRITICAL: Ensure your .env.local has GEMINI_API_KEY and restart Next.js server\r\nconst API_KEY = process.env.GEMINI_API_KEY;\r\n\r\n// Check if API_KEY is loaded at the top level (good for early debugging)\r\nif (!API_KEY) {\r\n  console.error(\"Environment variable GEMINI_API_KEY is not set.\");\r\n  // You might want to throw an error or handle this more gracefully for deployments\r\n}\r\n\r\n// ✅ CORRECTED: Instantiate with the API key using the correct class from the correct library\r\nconst genAI = new GoogleGenerativeAI(API_KEY);\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    // If the API_KEY wasn't set earlier, handle it here too for safety\r\n    if (!API_KEY) {\r\n        return NextResponse.json(\r\n            { success: false, error: \"GEMINI_API_KEY is not configured in environment variables.\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n\r\n    const { prompt } = await req.json();\r\n\r\n    // ✅ CORRECTED: Get the model instance correctly\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\r\n\r\n    // ✅ CORRECTED: Call generateContent directly on the model instance\r\n    const result = await model.generateContent([{ role: \"user\", parts: [{ text: prompt }] }]);\r\n\r\n    // The result structure from generateContent is typically simpler\r\n    const response = await result.response;\r\n    const text = response.text(); // Get the raw text from the response\r\n\r\n    let blogs = [];\r\n\r\n    // ✅ Try parsing text as JSON\r\n    try {\r\n      blogs = JSON.parse(text);\r\n      if (!Array.isArray(blogs)) {\r\n        blogs = [blogs]; // ensure it's always an array\r\n      }\r\n    } catch (err) {\r\n      // If Gemini gave plain text, wrap it in a single blog\r\n      blogs = [\r\n        {\r\n          title: \"Generated Blog\",\r\n          slug: \"generated-blog\",\r\n          content: text || \"No content generated\",\r\n        },\r\n      ];\r\n    }\r\n\r\n    // ✅ Save blogs to data.json\r\n    const filePath = path.join(process.cwd(), \"blogdata\", \"data.json\");\r\n    // Ensure the directory exists\r\n    await fs.mkdir(path.dirname(filePath), { recursive: true });\r\n    await fs.writeFile(filePath, JSON.stringify(blogs, null, 2), \"utf-8\");\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: \"Blogs fetched and saved successfully\",\r\n      blogs,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Gemini API error:\", error);\r\n    return NextResponse.json(\r\n      { success: false, error: error.message, details: error }, // Include full error for debugging\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA,qDAAqD;AACrD;AACA;AACA;;;;;AAEA,mFAAmF;AACnF,MAAM,UAAU,QAAQ,GAAG,CAAC,cAAc;AAE1C,yEAAyE;AACzE,IAAI,CAAC,SAAS;IACZ,QAAQ,KAAK,CAAC;AACd,kFAAkF;AACpF;AAEA,6FAA6F;AAC7F,MAAM,QAAQ,IAAI,sLAAkB,CAAC;AAE9B,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,mEAAmE;QACnE,IAAI,CAAC,SAAS;YACV,OAAO,gJAAY,CAAC,IAAI,CACpB;gBAAE,SAAS;gBAAO,OAAO;YAA6D,GACtF;gBAAE,QAAQ;YAAI;QAEtB;QAEA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,IAAI;QAEjC,gDAAgD;QAChD,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YAAE,OAAO;QAAmB;QAEnE,mEAAmE;QACnE,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;YAAC;gBAAE,MAAM;gBAAQ,OAAO;oBAAC;wBAAE,MAAM;oBAAO;iBAAE;YAAC;SAAE;QAExF,iEAAiE;QACjE,MAAM,WAAW,MAAM,OAAO,QAAQ;QACtC,MAAM,OAAO,SAAS,IAAI,IAAI,qCAAqC;QAEnE,IAAI,QAAQ,EAAE;QAEd,6BAA6B;QAC7B,IAAI;YACF,QAAQ,KAAK,KAAK,CAAC;YACnB,IAAI,CAAC,MAAM,OAAO,CAAC,QAAQ;gBACzB,QAAQ;oBAAC;iBAAM,EAAE,8BAA8B;YACjD;QACF,EAAE,OAAO,KAAK;YACZ,sDAAsD;YACtD,QAAQ;gBACN;oBACE,OAAO;oBACP,MAAM;oBACN,SAAS,QAAQ;gBACnB;aACD;QACH;QAEA,4BAA4B;QAC5B,MAAM,WAAW,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,YAAY;QACtD,8BAA8B;QAC9B,MAAM,gIAAE,CAAC,KAAK,CAAC,4GAAI,CAAC,OAAO,CAAC,WAAW;YAAE,WAAW;QAAK;QACzD,MAAM,gIAAE,CAAC,SAAS,CAAC,UAAU,KAAK,SAAS,CAAC,OAAO,MAAM,IAAI;QAE7D,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO;YAAE,SAAS;QAAM,GACvD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}