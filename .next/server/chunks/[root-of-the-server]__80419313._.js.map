{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///D:/nextjslearning/hunting-coder/src/app/api/generateBlogs/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { GoogleGenAI } from \"@google/genai\";\r\nimport fs from \"fs/promises\";\r\nimport path from \"path\";\r\n\r\nconst ai = new GoogleGenAI({\r\n  apiKey: process.env.GEMINI_API_KEY,\r\n});\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const { prompt } = await req.json();\r\n\r\n    const result = await ai.models.generateContent({\r\n      model: \"gemini-2.5-flash\",\r\n      contents: [{ role: \"user\", parts: [{ text: prompt }] }],\r\n    });\r\n\r\n    // ✅ Safely extract Gemini text\r\n    const text =\r\n      result?.response?.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\r\n\r\n    let blogs = [];\r\n\r\n    // ✅ Try parsing text as JSON\r\n    try {\r\n      blogs = JSON.parse(text);\r\n      if (!Array.isArray(blogs)) {\r\n        blogs = [blogs]; // ensure it's always an array\r\n      }\r\n    } catch (err) {\r\n      // If Gemini gave plain text, wrap it in a single blog\r\n      blogs = [\r\n        {\r\n          title: \"Generated Blog\",\r\n          slug: \"generated-blog\",\r\n          content: text || \"No content generated\",\r\n        },\r\n      ];\r\n    }\r\n\r\n    // ✅ Save blogs to data.json\r\n    const filePath = path.join(process.cwd(), \"blogdata\", \"data.json\");\r\n    await fs.writeFile(filePath, JSON.stringify(blogs, null, 2), \"utf-8\");\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: \"Blogs fetched and saved successfully\",\r\n      blogs,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Gemini API error:\", error);\r\n    return NextResponse.json(\r\n      { success: false, error: error.message },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,KAAK,IAAI,4KAAW,CAAC;IACzB,QAAQ,QAAQ,GAAG,CAAC,cAAc;AACpC;AAEO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,IAAI;QAEjC,MAAM,SAAS,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC;YAC7C,OAAO;YACP,UAAU;gBAAC;oBAAE,MAAM;oBAAQ,OAAO;wBAAC;4BAAE,MAAM;wBAAO;qBAAE;gBAAC;aAAE;QACzD;QAEA,+BAA+B;QAC/B,MAAM,OACJ,QAAQ,UAAU,YAAY,CAAC,EAAE,EAAE,SAAS,OAAO,CAAC,EAAE,EAAE,QAAQ;QAElE,IAAI,QAAQ,EAAE;QAEd,6BAA6B;QAC7B,IAAI;YACF,QAAQ,KAAK,KAAK,CAAC;YACnB,IAAI,CAAC,MAAM,OAAO,CAAC,QAAQ;gBACzB,QAAQ;oBAAC;iBAAM,EAAE,8BAA8B;YACjD;QACF,EAAE,OAAO,KAAK;YACZ,sDAAsD;YACtD,QAAQ;gBACN;oBACE,OAAO;oBACP,MAAM;oBACN,SAAS,QAAQ;gBACnB;aACD;QACH;QAEA,4BAA4B;QAC5B,MAAM,WAAW,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,YAAY;QACtD,MAAM,gIAAE,CAAC,SAAS,CAAC,UAAU,KAAK,SAAS,CAAC,OAAO,MAAM,IAAI;QAE7D,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO;QAAC,GACvC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}